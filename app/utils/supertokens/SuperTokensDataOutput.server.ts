import { serialize } from "cookie"; // WARNING: This is a dependency of `SuperTokens`, NOT our app

/**
 * Acts as an output from `SuperTokens`'s auth functions/methods, replacing the inflexible `res`
 * (response) object that it typically requires. Instead of taking the approach of dangerously
 * mutating the `res` object, it exposes any necessary auth data (mainly the `responseHeaders`) for
 * proper/safe use in whichever context this data is needed.
 *
 * You should pass an instance of this class to any `SuperTokens` function or methods that
 * expects a `res` (response) object.
 *
 * Extends the `BaseResponse` from `SuperTokens`.
 */
class SuperTokensDataOutput {
  // SuperTokens Hijacks
  #wrapperUsed: true = true;

  // Custom Data
  #headers = new Headers();
  #cookies = new Map<string, string>();

  /** Internal getter used strictly for communicating with SuperTokens */
  get wrapperUsed(): true {
    return this.#wrapperUsed;
  }

  /** Exposes the auth response `Headers` generated by `SuperTokens` */
  get responseHeaders(): Headers {
    return this.#headers;
  }

  /** Internal method used strictly for communicating with `SuperTokens`. */
  setHeader(key: string, value: string, allowDuplicateKey: boolean): void {
    if (this.#headers.has(key) && allowDuplicateKey) this.#headers.append(key, value);
    else this.#headers.set(key, value);
  }

  /** Internal method used strictly for communicating with `SuperTokens` */
  setCookie(
    key: string,
    value: string,
    domain: string | undefined, // Note: Cannot use optional argument here because of ordering
    secure: boolean,
    httpOnly: boolean,
    expires: number,
    path: string,
    sameSite: "strict" | "lax" | "none"
  ): void {
    // Derive cookie details
    const serializeOpts = { domain, secure, httpOnly, expires: new Date(expires), path, sameSite };
    const cookie = serialize(key, value, serializeOpts);

    // Add (or replace) new (or old) cookie
    const [cookieKey, ...cookieValueAndConfig] = cookie.split("=");
    this.#cookies.set(cookieKey, cookieValueAndConfig.join("="));

    // Re-assign cookie header
    const COOKIE_HEADER = "Set-Cookie";
    this.#headers.delete(COOKIE_HEADER);
    this.#cookies.forEach((valueAndConfig, key) => this.#headers.append(COOKIE_HEADER, `${key}=${valueAndConfig}`));
  }

  /*
   * NOTE: There is no reason to duplicate the `send*Response` and `setStatus` methods of `SuperTokens`'s
   * `BaseResponse` because our backend logic can take care of those details. The only methods we need are
   * those that allow us to _expose_ any necessary `Headers` _to_ our backend logic.
   */
}

export default SuperTokensDataOutput;
